let url = ["https://coolors.co/264653-2a9d8f-e9c46a-f4a261-e76f51",
  "https://coolors.co/006d77-83c5be-edf6f9-ffddd2-e29578",
  "https://coolors.co/355070-6d597a-b56576-e56b6f-eaac8b",
  "https://coolors.co/1a535c-4ecdc4-f7fff7-ff6b6b-ffe66d",
];
let palette;
let dc;

function setup() {
  createCanvas(800, 800);
  colorMode(HSB, 360, 100, 100, 100);
  angleMode(DEGREES);

  dc = drawingContext;
}



function draw() {
  palette = shuffle(createPalette(random(url)), true);
  let c = palette[0];
  palette.shift();

  let graphics = [];

  for (let i = 0; i < 10; i++) {
    let colors = shuffle(palette.concat());
    clear();
    let ratio = map(i, 0, 10, 2, 7);
    let yStep = height / ratio;
    let xStep = width / ratio;
    let mx = -width;
    let my = 0;
    let x = mx;
    let y = my;
    while (x < width) {
      rectMode(CENTER);
      fill(random(colors));
      noStroke();
      while (y <= height + yStep) {
        rect(x + xStep / 2 - xStep / 3 / 2, y, xStep * 2 / 3, yStep / 3);
        rect(x + xStep - xStep / 6, y + yStep * 1 / 6, xStep / 3, yStep * 2 / 3);
        x = x + xStep * 2 / 3;
        y += yStep * 2 / 3;
      }
      mx += xStep / 3;
      my -= yStep / 3;
      x = mx;
      y = my;
    }
    graphics.push(get());
  }
  clear();
  let offset = width / 20;
  let rx = offset;
  let ry = offset;
  let rd = width - offset * 2;
  recursiveRect(rx, ry, rd, this, graphics);

  let g = get();
  background(c);
  push();
  dc.shadowColor = color(0, 0, 0, 33);
  dc.shadowBlur = width / 40;
  dc.shadowOffsetX = width / 40 / 2;
  dc.shadowOffsetY = width / 40 / 2;
  image(g, 0, 0);
  pop();


  // noLoop();
  frameRate(1 / 2);
}


function recursiveRect(x, y, d, g, graphics) {
  let step = int(random(1, 4));
  let w = d / step;
  for (let j = 0; j < step; j++) {
    for (let i = 0; i < step; i++) {
      let nx = x + i * w;
      let ny = y + j * w;
      if (random(100) < 90 && w > width / 5) {
        recursiveRect(nx, ny, w, g, graphics);
      } else {
        g.push();
        g.translate(nx + w / 2, ny + w / 2);
        g.rotate(int(random(4)) * 360 / 4);
        g.scale(random() > 0.5 ? -1 : 1, random() > 0.5 ? -1 : 1);
        g.scale((w - 5) / w);
        g.imageMode(CENTER);
        let gg = graphics[int(random(graphics.length))];
        // let gg = random(graphics);
        g.image(gg, 0, 0, w, w);
        g.pop();
      }
    }
  }
}

function drawSuperEllipes(x, y, w, h, n) {
  push();
  translate(x, y);
  scale((w - 5) / w);
  noStroke();
  // while (fc == pfc) fc = random(palette);
  // fill(fc);
  // pfc = fc;
  let na = 2 / n;
  beginShape();
  for (let angle = 0; angle < 360; angle += 2) {
    let x = pow(abs(cos(angle)), na) * w / 2 * sgn(cos(angle));
    let y = pow(abs(sin(angle)), na) * h / 2 * sgn(sin(angle));
    vertex(x, y);
  }
  endShape(CLOSE);
  pop();
}

function sgn(val) {
  if (val == 0) {
    return 0;
  }
  return val / abs(val);
}

function createPalette(_url) {
  let slash_index = _url.lastIndexOf('/');
  let pallate_str = _url.slice(slash_index + 1);
  let arr = pallate_str.split('-');
  for (let i = 0; i < arr.length; i++) {
    arr[i] = color('#' + arr[i]);
  }
  return arr;
}
